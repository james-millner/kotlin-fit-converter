import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.8.22"
    id ("org.jetbrains.kotlin.plugin.serialization") version "1.8.22"

    // For my fat JAR needs
    id("com.github.johnrengelman.shadow") version "8.1.1"

    // Apply the test-logger plugin to add support outputting test results neatly.
    id("com.adarshr.test-logger") version "3.2.0"

    // Apply the org.jetbrains.dokka plugin to generate documentation.
    id("org.jetbrains.dokka") version "1.8.20"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
    jacoco
}

group = "kjm.fit.converter"
version = "0.2.1-alpha"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation(files("../external-jar/fit.jar"))

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.5.1")

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.3")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.3")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.1-jre")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(19))
    }
}

publishing {
    publications {
        create<MavenPublication>("mavenLocal") {
            groupId = "${group}"
            artifactId = "kotlin-fit-converter-lib"
            version = "${project.version}"

            from(components["java"])
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/" + System.getenv("GITHUB_ACTOR") + "/kotlin-fit-converter")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("PACKAGE_TOKEN")
            }
        }
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jacoco {
        enabled = true
    }
}

tasks {
    shadowJar {
        archiveClassifier.set("")
    }
}

tasks.dokkaHtml {
    outputDirectory.set(buildDir.resolve("documentation/html"))
}

tasks.register("copyDokkaDocs") {
    dependsOn("dokkaHtml")
    doLast {
        val dokkaDocsDir = file("${buildDir}/documentation/html")
        val targetDocsDir = file("../docs")

        if (dokkaDocsDir.exists()) {
            targetDocsDir.deleteRecursively()
            targetDocsDir.mkdirs()
            dokkaDocsDir.copyRecursively(targetDocsDir)
        } else {
            logger.warn("Dokka documentation directory not found. Please ensure Dokka has been executed.")
        }
    }
}