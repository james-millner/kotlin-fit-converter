import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import java.io.FileWriter

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    kotlin("multiplatform") version "2.0.21"
    kotlin("plugin.serialization") version "2.0.0"

    // For my fat JAR needs
    id("com.github.johnrengelman.shadow") version "8.1.1"

    // Apply the test-logger plugin to add support outputting test results neatly.
    id("com.adarshr.test-logger") version "4.0.0"

    // Apply the org.jetbrains.dokka plugin to generate documentation.
    id("org.jetbrains.dokka") version "1.9.20"

    //K2PB - Protobuf
    id("com.glureau.k2pb") version "0.9.25"

    `maven-publish`
    jacoco
}

group = "kjm.fit.converter"
version = "0.4.14-alpha"

val customPackage = "kjm.fit.converter"

k2pb {
    protoPackageName = customPackage
    javaOuterClassnameSuffix = "Proto"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

kotlin {
    jvmToolchain(21)
    jvm {
        // Configure the JVM target with Java library compatibility
        withJava()

        compilations.all {
            compileTaskProvider.configure {
                compilerOptions {
                    jvmTarget.set(JvmTarget.JVM_21)
                }
            }
        }

        // Enable JUnit 5 test support
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }

    sourceSets {
        // Use the old Java-style source directories
        val jvmMain by getting {
            kotlin.srcDir("build/generated/ksp/metadata/commonMain/kotlin")
            kotlin.srcDir("src/main/kotlin")
            resources.srcDir("src/main/resources")

            dependencies {
                implementation("com.garmin:fit:21.171.0")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.0")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.7.0")
                implementation("com.glureau.k2pb:k2pb-runtime-jvm:0.9.24")
            }
        }

        val jvmTest by getting {
            kotlin.srcDir("src/test/kotlin")
            resources.srcDir("src/test/resources")
            dependencies {
                // Use the Kotlin JUnit 5 integration.
                implementation("org.jetbrains.kotlin:kotlin-test-junit5")

                // Use the JUnit 5 integration.
                implementation("org.junit.jupiter:junit-jupiter-engine:5.10.3")
                implementation("org.junit.jupiter:junit-jupiter-params:5.10.3")
            }
        }
    }
}
dependencies {
    // Temporary solution, k2pb plugin should handle that automatically
    ksp("com.glureau.k2pb:k2pb-compiler:0.9.25")
}

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["kotlin"])
            groupId = "${group}"
            artifactId = "kotlin-fit-converter-lib"
            version = "${project.version}"
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/" + System.getenv("GITHUB_ACTOR") + "/kotlin-fit-converter")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("PACKAGE_TOKEN")
            }
        }
    }
}

tasks.dokkaHtml {
    outputDirectory.set(layout.buildDirectory.dir("documentation/html"))
}

tasks.register("copyDokkaDocs") {
    dependsOn("dokkaHtml")
    doLast {
        val dokkaDocsDir = layout.buildDirectory.dir("documentation/html").get().asFile
        val targetDocsDir = file("../docs")

        if (dokkaDocsDir.exists()) {
            targetDocsDir.deleteRecursively()
            targetDocsDir.mkdirs()
            dokkaDocsDir.copyRecursively(targetDocsDir)
        } else {
            logger.warn("Dokka documentation directory not found. Please ensure Dokka has been executed.")
        }
    }
}

tasks.register("bumpVersionAndUpdateReadme") {
    group = "versioning"
    description = "Bumps the version and updates the README file"

    doLast {
        // Split the current version string into components
        val versionParts = version.toString().split("-")
        val versionComponents = versionParts[0].split(".").map { it.toInt() }.toMutableList()
        val preRelease = if (versionParts.size > 1) "-${versionParts[1]}" else ""

        // Increment the patch version
        versionComponents[2]++

        // Construct the new version string
        val newVersionString = "${versionComponents.joinToString(".")}$preRelease"

        // Update the version in the build.gradle.kts file
        val buildFile = File("kotlin-fit-converter-lib/build.gradle.kts")
        val buildFileLines = buildFile.readLines()
        val updatedBuildFileLines = buildFileLines.map { line ->
            if (line.startsWith("version =")) {
                "version = \"$newVersionString\""
            } else {
                line
            }
        }

        FileWriter(buildFile).use { writer ->
            updatedBuildFileLines.forEach { writer.write("$it\n") }
        }

        // Update the version badge in the README file
        val readmeFile = File("README.md")
        val readmeFileLines = readmeFile.readLines()
        val updatedReadmeFileLines = readmeFileLines.map { line ->
            if (line.contains("[![Latest Release]")) {
                val newBadge =
                    "[![Latest Release](https://img.shields.io/badge/$newVersionString-red)](https://github.com/example/garmin-fit-converter/releases)"
                newBadge
            } else {
                line
            }
        }

        FileWriter(readmeFile).use { writer ->
            updatedReadmeFileLines.forEach { writer.write("$it\n") }
        }

        println("Version bumped to $newVersionString and README file updated")
    }
}
